import os
import binascii
from typing import Union

class MFCC:
    """
    MyFirstCoolCodec (MFCC) Ultimate Version —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    –§–æ—Ä–º–∞—Ç: [count]|[hex_char]| –Ω–∞–ø—Ä–∏–º–µ—Ä "04|F|" = F F F F
    """
    
    @staticmethod
    def encode(data: Union[bytes, str]) -> str:
        """–°–∂–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è RLE —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏"""
        if isinstance(data, str):
            data = data.encode('utf-8')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HEX —Å—Ç—Ä–æ–∫—É
        hex_str = data.hex().upper()
        if not hex_str:
            return ""
        
        encoded = []
        count = 1
        current_char = hex_str[0]
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º HEX —Å—Ç—Ä–æ–∫–∏
        for i in range(1, len(hex_str)):
            if hex_str[i] == current_char and count < 255:  # –ú–∞–∫—Å–∏–º—É–º 255 –ø–æ–≤—Ç–æ—Ä–æ–≤
                count += 1
            else:
                # –ï—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤ –±–æ–ª—å—à–µ 3 - –∏—Å–ø–æ–ª—å–∑—É–µ–º RLE —Å–∂–∞—Ç–∏–µ
                if count > 3:
                    encoded.append(f"{count:02X}|{current_char}|")
                else:
                    # –ò–Ω–∞—á–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    for _ in range(count):
                        encoded.append(current_char)
                count = 1
                current_char = hex_str[i]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if count > 3:
            encoded.append(f"{count:02X}|{current_char}|")
        else:
            for _ in range(count):
                encoded.append(current_char)
            
        result = "".join(encoded)
        print(f"–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: {len(data)} –±–∞–π—Ç -> {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
        return result
    
    @staticmethod
    def decode(compressed_data: str) -> bytes:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ MFCC-—Ñ–æ—Ä–º–∞—Ç–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏"""
        if not compressed_data:
            return b""
        
        decoded_hex = []
        i = 0
        length = len(compressed_data)
        
        print(f"–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: {length} —Å–∏–º–≤–æ–ª–æ–≤")
        
        while i < length:
            # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è RLE –±–ª–æ–∫–∞ (XX|Y|)
            if (i + 4 <= length and 
                compressed_data[i+2] == '|' and 
                compressed_data[i+4] == '|'):
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —Å–∏–º–≤–æ–ª–∞ - HEX —Ü–∏—Ñ—Ä—ã
                if (compressed_data[i] in '0123456789ABCDEF' and 
                    compressed_data[i+1] in '0123456789ABCDEF' and
                    compressed_data[i+3] in '0123456789ABCDEF'):
                    
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ —Å–∏–º–≤–æ–ª
                        count_hex = compressed_data[i:i+2]
                        count = int(count_hex, 16)
                        symbol = compressed_data[i+3]
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª count —Ä–∞–∑
                        decoded_hex.append(symbol * count)
                        i += 5  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Å—å –±–ª–æ–∫ XX|Y|
                        continue
                    except (ValueError, IndexError):
                        pass
            
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π HEX —Å–∏–º–≤–æ–ª
            current_char = compressed_data[i]
            if current_char in '0123456789ABCDEF':
                decoded_hex.append(current_char)
            
            i += 1
        
        # –°–æ–±–∏—Ä–∞–µ–º HEX —Å—Ç—Ä–æ–∫—É
        hex_str = "".join(decoded_hex)
        print(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ HEX —Å–∏–º–≤–æ–ª–æ–≤: {len(hex_str)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ç–Ω–æ—Å—Ç—å –¥–ª–∏–Ω—ã HEX —Å—Ç—Ä–æ–∫–∏
        if len(hex_str) % 2 != 0:
            print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: HEX —Å—Ç—Ä–æ–∫–∞ –Ω–µ—á–µ—Ç–Ω–æ–π –¥–ª–∏–Ω—ã. –î–æ–±–∞–≤–ª—è–µ–º '0' –≤ –∫–æ–Ω–µ—Ü.")
            hex_str += '0'
        
        try:
            result = bytes.fromhex(hex_str)
            print(f"–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –±–∞–π—Ç: {len(result)}")
            return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è HEX –≤ –±–∞–π—Ç—ã: {e}")
            print(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ HEX: {hex_str[max(0, len(hex_str)-100):]}")
            raise
    
    @staticmethod
    def encode_file(input_path: str, output_path: str) -> bool:
        """–°–∂–∏–º–∞–µ—Ç —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ MFCC"""
        try:
            if not os.path.exists(input_path):
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
                return False
            
            # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
            with open(input_path, 'rb') as f:
                original_data = f.read()
            
            print(f"üìÅ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(original_data)} –±–∞–π—Ç")
            
            # –°–∂–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            compressed_data = MFCC.encode(original_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∂–∞—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(compressed_data)
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
            original_size = len(original_data)
            compressed_size = len(compressed_data)
            ratio = (1 - compressed_size / (original_size * 2)) * 100
            
            print(f"‚úÖ –§–∞–π–ª —Å–∂–∞—Ç: {input_path} -> {output_path}")
            print(f"üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {ratio:.1f}%")
            print(f"üì¶ –û—Ä–∏–≥–∏–Ω–∞–ª: {original_size} –±–∞–π—Ç")
            print(f"üî∞ –°–∂–∞—Ç—ã–π: {compressed_size} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    @staticmethod
    def decode_file(input_path: str, output_path: str) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ MFCC-—Ñ–æ—Ä–º–∞—Ç–∞"""
        try:
            if not os.path.exists(input_path):
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
                return False
            
            # –ß–∏—Ç–∞–µ–º —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª
            with open(input_path, 'r', encoding='utf-8') as f:
                compressed_data = f.read().strip()
            
            print(f"üìÅ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ MFCC: {len(compressed_data)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            pipe_count = compressed_data.count('|')
            rle_blocks = pipe_count // 2
            print(f"üîç RLE –±–ª–æ–∫–æ–≤: {rle_blocks}")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            decoded_data = MFCC.decode(compressed_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(output_path, 'wb') as f:
                f.write(decoded_data)
            
            print(f"‚úÖ –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {input_path} -> {output_path}")
            print(f"üì¶ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {len(decoded_data)} –±–∞–π—Ç")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    @staticmethod
    def analyze_file(file_path: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É MFCC —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            print(f"üîç –ê–Ω–∞–ª–∏–∑ MFCC —Ñ–∞–π–ª–∞: {file_path}")
            print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìç –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π '|': {content.count('|')}")
            print(f"üî¢ RLE –±–ª–æ–∫–æ–≤: {content.count('|') // 2}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
            hex_count = sum(1 for c in content if c in '0123456789ABCDEF')
            other_count = len(content) - hex_count - content.count('|')
            
            print(f"üî° HEX —Å–∏–º–≤–æ–ª–æ–≤: {hex_count}")
            print(f"üìù –ü—Ä–æ—á–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: {other_count}")
            
            # –ù–∞—Ö–æ–¥–∏–º RLE –±–ª–æ–∫–∏
            import re
            rle_pattern = r'([0-9A-F]{2})\|([0-9A-F])\|'
            rle_matches = re.findall(rle_pattern, content)
            
            if rle_matches:
                print(f"üéØ –ù–∞–π–¥–µ–Ω–æ RLE –±–ª–æ–∫–æ–≤: {len(rle_matches)}")
                print("üìã –ü—Ä–∏–º–µ—Ä—ã RLE –±–ª–æ–∫–æ–≤:")
                for i, (count, char) in enumerate(rle_matches[:5]):
                    print(f"   {count}|{char}| = {char} * {int(count, 16)}")
            
            # –ü—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            print(f"\nüëÄ –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤:")
            print(content[:300])
            print(f"\nüëÅÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:")
            print(content[-200:] if len(content) > 200 else content)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

def test_mfcc():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –∫–æ–¥–µ–∫—Å–∞"""
    print("=== üß™ –¢–µ—Å—Ç MFCC —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ ===\n")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏
    print("1. üî¢ –¢–µ—Å—Ç —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏:")
    test_data = bytes.fromhex("FFFFFFFFAAAAABBBBBBBBBCCDDDD")
    compressed = MFCC.encode(test_data)
    decompressed = MFCC.decode(compressed)
    
    print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª: {test_data.hex().upper()}")
    print(f"   –°–∂–∞—Ç—ã–π:   {compressed}")
    print(f"   –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {decompressed.hex().upper()}")
    print(f"   ‚úÖ –°–æ–≤–ø–∞–¥–∞–µ—Ç: {test_data == decompressed}\n")
    
    # –¢–µ—Å—Ç 2: –¢–µ–∫—Å—Ç
    print("2. üìù –¢–µ—Å—Ç —Å —Ç–µ–∫—Å—Ç–æ–º:")
    text = "Hello MFCC! This is amazing compression!!!"
    text_compressed = MFCC.encode(text)
    text_decompressed = MFCC.decode(text_compressed).decode('utf-8')
    
    print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª: {text}")
    print(f"   –°–∂–∞—Ç—ã–π: {text_compressed}")
    print(f"   –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {text_decompressed}")
    print(f"   ‚úÖ –°–æ–≤–ø–∞–¥–∞–µ—Ç: {text == text_decompressed}\n")
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    print("3. üìÅ –¢–µ—Å—Ç —Å —Ñ–∞–π–ª–∞–º–∏:")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_content = "TEST " * 50 + "A" * 100 + "B" * 50
        with open('test_file.txt', 'w') as f:
            f.write(test_content)
        
        # –°–∂–∏–º–∞–µ–º
        MFCC.encode_file('test_file.txt', 'test_file.mfcc')
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
        MFCC.decode_file('test_file.mfcc', 'test_file_decompressed.txt')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º
        with open('test_file.txt', 'r') as f:
            orig = f.read()
        with open('test_file_decompressed.txt', 'r') as f:
            decomp = f.read()
        
        print(f"   ‚úÖ –§–∞–π–ª—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã: {orig == decomp}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        MFCC.analyze_file('test_file.mfcc')
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_mfcc()
