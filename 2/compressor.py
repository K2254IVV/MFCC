#!/usr/bin/env python3
"""
MFCC Compressor —Å –¥–≤—É–º—è —Ä–µ–∂–∏–º–∞–º–∏: split –∏ nosplit
"""

import os
import sys
import argparse
from MFCC import MFCC

def compress_nosplit(input_path, output_path=None):
    """–†–µ–∂–∏–º nosplit: –æ–¥–∏–Ω —Ñ–∞–π–ª ‚Üí –æ–¥–∏–Ω .mfcc"""
    if not os.path.exists(input_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        return False
    
    if output_path is None:
        output_path = input_path + '.mfcc'
    
    print(f"üéØ –†–µ–∂–∏–º NOSPLIT: {input_path}")
    return MFCC.encode_file_nosplit(input_path, output_path)

def compress_split(input_paths, output_path=None):
    """–†–µ–∂–∏–º split: –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ ‚Üí –æ–¥–∏–Ω .mfcc –∞—Ä—Ö–∏–≤"""
    if output_path is None:
        if len(input_paths) == 1 and os.path.isfile(input_paths[0]):
            output_path = input_paths[0] + '.mfcc'
        else:
            output_path = 'archive.mfcc'
    
    print(f"üéØ –†–µ–∂–∏–º SPLIT: {len(input_paths)} –æ–±—ä–µ–∫—Ç–æ–≤ ‚Üí {output_path}")
    return MFCC.encode_file_split(input_paths, output_path)

def main():
    parser = argparse.ArgumentParser(
        description='MFCC Compressor —Å –¥–≤—É–º—è —Ä–µ–∂–∏–º–∞–º–∏',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  
NOSPLIT —Ä–µ–∂–∏–º (–æ–¥–∏–Ω —Ñ–∞–π–ª):
  python compressor.py file.txt                    # –°–∂–∞—Ç—å —Ñ–∞–π–ª
  python compressor.py image.jpg -m nosplit        # –Ø–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∂–∏–º

SPLIT —Ä–µ–∂–∏–º (–∞—Ä—Ö–∏–≤–∞—Ü–∏—è):
  python compressor.py folder -m split            # –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É
  python compressor.py file1.txt file2.jpg -m split # –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã
  python compressor.py . -m split -o my_archive.mfcc # –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ –≤ –∞—Ä—Ö–∏–≤
        '''
    )
    
    parser.add_argument('inputs', nargs='+', help='–§–∞–π–ª—ã –∏–ª–∏ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∂–∞—Ç–∏—è')
    parser.add_argument('-m', '--mode', choices=['split', 'nosplit'], 
                       help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: split (–∞—Ä—Ö–∏–≤) –∏–ª–∏ nosplit (–æ–¥–∏–Ω —Ñ–∞–π–ª)')
    parser.add_argument('-o', '--output', help='–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª')
    parser.add_argument('-r', '--recursive', action='store_true',
                       help='–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è split)')
    
    args = parser.parse_args()
    
    print("üéâ === MFCC Compressor ===")
    print("üöÄ –î–≤–∞ —Ä–µ–∂–∏–º–∞: SPLIT (–∞—Ä—Ö–∏–≤) –∏ NOSPLIT (–æ–¥–∏–Ω —Ñ–∞–π–ª)")
    print("=" * 60)
    
    # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if args.mode is None:
        if len(args.inputs) == 1 and os.path.isfile(args.inputs[0]):
            args.mode = 'nosplit'
        else:
            args.mode = 'split'
        print(f"üîç –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–µ–∂–∏–º: {args.mode}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if args.mode == 'nosplit':
        if len(args.inputs) > 1:
            print("‚ùå Nosplit —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º —Ñ–∞–π–ª–æ–º!")
            return
        
        compress_nosplit(args.inputs[0], args.output)
    
    else:  # split mode
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø—É—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        valid_paths = []
        for path in args.inputs:
            if os.path.exists(path):
                valid_paths.append(path)
            else:
                print(f"‚ö†Ô∏è  –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")
        
        if valid_paths:
            compress_split(valid_paths, args.output)
        else:
            print("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—É—Ç–µ–π –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏!")

if __name__ == "__main__":
    main()
