#!/usr/bin/env python3
"""
MFCC Opener —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö —Ä–µ–∂–∏–º–æ–≤
"""

import os
import argparse
from MFCC import MFCC

def decompress_file(input_path, output_path=None, mode=None):
    """–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç MFCC —Ñ–∞–π–ª —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–µ–∂–∏–º–∞"""
    if not os.path.exists(input_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        return False
    
    # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
    if mode is None:
        try:
            with open(input_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            try:
                MFCC.decode_split(content)
                mode = 'split'
            except:
                mode = 'nosplit'
            
            print(f"üîç –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–µ–∂–∏–º: {mode}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {e}")
            return False
    
    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if mode == 'nosplit':
        if output_path is None:
            if input_path.endswith('.mfcc'):
                output_path = input_path[:-5]
            else:
                output_path = input_path + '.decompressed'
        
        print(f"üéØ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ NOSPLIT: {input_path} ‚Üí {output_path}")
        return MFCC.decode_file_nosplit(input_path, output_path)
    
    else:  # split mode
        if output_path is None:
            if input_path.endswith('.mfcc'):
                output_path = input_path[:-5] + '_extracted'
            else:
                output_path = 'extracted_files'
        
        print(f"üéØ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ SPLIT: {input_path} ‚Üí {output_path}")
        return MFCC.decode_file_split(input_path, output_path)

def main():
    parser = argparse.ArgumentParser(
        description='MFCC Opener —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö —Ä–µ–∂–∏–º–æ–≤',
        epilog='''
–ü—Ä–∏–º–µ—Ä—ã:
  python open.py file.mfcc                    # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
  python open.py archive.mfcc -m split        # –Ø–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∂–∏–º
  python open.py file.mfcc -o output.txt      # –£–∫–∞–∑–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
  python open.py file.mfcc -a                 # –ê–Ω–∞–ª–∏–∑ –±–µ–∑ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
        '''
    )
    
    parser.add_argument('input', help='MFCC —Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏')
    parser.add_argument('-o', '--output', help='–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞')
    parser.add_argument('-m', '--mode', choices=['split', 'nosplit'],
                       help='–Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞')
    parser.add_argument('-a', '--analyze', action='store_true',
                       help='–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏')
    
    args = parser.parse_args()
    
    print("üéâ === MFCC File Opener ===")
    print("üöÄ –î–≤–∞ —Ä–µ–∂–∏–º–∞: SPLIT (–∞—Ä—Ö–∏–≤) –∏ NOSPLIT (–æ–¥–∏–Ω —Ñ–∞–π–ª)")
    print("=" * 60)
    
    if args.analyze:
        MFCC.analyze_file(args.input)
        return
    
    decompress_file(args.input, args.output, args.mode)

if __name__ == "__main__":
    main()
