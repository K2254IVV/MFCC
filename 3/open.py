#!/usr/bin/env python3
"""
MFCC Opener —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–µ–∂–∏–º–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
"""

import os
import argparse
from MFCC import MFCC

def decompress_file(input_path, output_path=None):
    """–£–º–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–µ–∂–∏–º–∞"""
    if not os.path.exists(input_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        return False
    
    if output_path is None:
        if input_path.endswith('.mfcc'):
            output_path = input_path[:-5]
        else:
            output_path = input_path + '.decompressed'
    
    print(f"üéØ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Ñ–∞–π–ª–∞: {input_path}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
    return MFCC.decode_file_auto(input_path, output_path)

def main():
    parser = argparse.ArgumentParser(description='MFCC Opener —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º')
    parser.add_argument('input', help='MFCC —Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏')
    parser.add_argument('-o', '--output', help='–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª')
    
    args = parser.parse_args()
    
    print("üéâ === MFCC File Opener ===")
    print("üöÄ –£–º–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–µ–∂–∏–º–∞")
    print("=" * 50)
    
    decompress_file(args.input, args.output)

if __name__ == "__main__":
    main()
