#!/usr/bin/env python3
"""
MFCC Compressor - MyFirstCoolCodec –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä
–°–∂–∏–º–∞–µ—Ç –ª—é–±—ã–µ —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç .mfcc —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
"""

import os
import sys
import argparse
from MFCC import MFCC

def compress_file(input_path, output_path=None):
    """
    –°–∂–∏–º–∞–µ—Ç —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç MFCC
    
    Args:
        input_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
        output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ None, —Ç–æ input_path.mfcc)
    """
    if not os.path.exists(input_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        return False
    
    if output_path is None:
        output_path = input_path + '.mfcc'
    
    print(f"üéØ –°–∂–∞—Ç–∏–µ —Ñ–∞–π–ª–∞: {input_path}")
    return MFCC.encode_file(input_path, output_path)

def compress_directory(directory_path, recursive=False):
    """
    –°–∂–∏–º–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    """
    if not os.path.exists(directory_path):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory_path}")
        return False
    
    success_count = 0
    total_count = 0
    
    if recursive:
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥
        for root, dirs, files in os.walk(directory_path):
            for filename in files:
                if not filename.endswith('.mfcc'):  # –ù–µ —Å–∂–∏–º–∞–µ–º —É–∂–µ —Å–∂–∞—Ç—ã–µ —Ñ–∞–π–ª—ã
                    file_path = os.path.join(root, filename)
                    total_count += 1
                    if compress_file(file_path):
                        success_count += 1
                    print("‚îÄ" * 60)
    else:
        # –¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        for filename in os.listdir(directory_path):
            file_path = os.path.join(directory_path, filename)
            if os.path.isfile(file_path) and not filename.endswith('.mfcc'):
                total_count += 1
                if compress_file(file_path):
                    success_count += 1
                print("‚îÄ" * 60)
    
    print(f"üìä –ò—Ç–æ–≥: —É—Å–ø–µ—à–Ω–æ —Å–∂–∞—Ç–æ {success_count}/{total_count} —Ñ–∞–π–ª–æ–≤")
    return success_count > 0

def main():
    parser = argparse.ArgumentParser(
        description='MFCC Compressor - —Å–∂–∏–º–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç .mfcc',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python compressor.py document.txt          # –°–∂–∞—Ç—å —Ñ–∞–π–ª
  python compressor.py image.jpg -o img.mfcc # –°–∂–∞—Ç—å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω–∏
  python compressor.py ./folder -r           # –°–∂–∞—Ç—å –≤—Å—é –ø–∞–ø–∫—É —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        '''
    )
    
    parser.add_argument('input', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∂–∞—Ç–∏—è')
    parser.add_argument('-o', '--output', help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞')
    parser.add_argument('-r', '--recursive', action='store_true', 
                       help='–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏')
    parser.add_argument('-v', '--version', action='version', version='MFCC Compressor 2.0')
    
    args = parser.parse_args()
    
    print("üéâ === MFCC Compressor ===")
    print("üöÄ MyFirstCoolCodec - Ultimate Compression Technology")
    print("üìÅ –§–æ—Ä–º–∞—Ç —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏: COUNT|HEX|")
    print("=" * 60)
    
    if os.path.isfile(args.input):
        compress_file(args.input, args.output)
    
    elif os.path.isdir(args.input):
        compress_directory(args.input, args.recursive)
    
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: '{args.input}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π")

if __name__ == "__main__":
    main()